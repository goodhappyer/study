Adapter(适配器模式)
将一个类的接口转换成客户希望的另外一个接口。Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
适用场景：
1、已经存在的类的接口不符合我们的需求；
2、创建一个可以复用的类，使得该类可以与其他不相关的类或不可预见的类（即那些接口可能不一定兼容的类）协同工作；
3、在不对每一个都进行子类化以匹配它们的接口的情况下，使用一些已经存在的子类。
一\类适配器 通过类的继承 增加一些方使之有其它功能
[java]
// 已存在的、具有特殊功能、但不符合我们既有的标准接口的类
class Adaptee 
{
	public void specificRequest() 
	{
		System.out.println("被适配类具有 特殊功能...");
	}
}

/ 目标接口，或称为标准接口
interface Target 
{
	public void request();
}

// 具体目标类，只提供普通功能
class ConcreteTarget implements Target 
{
	public void request() 
	{
		System.out.println("普通类 具有 普通功能...");
	}
}

// 适配器类，继承了被适配类，同时实现标准接口
class Adapter extends Adaptee implements Target
{
	public void request() 
	{
		super.specificRequest();
	}
}
// 测试类
public class Client 
{
	public static void main(String[] args) 
	{
		// 使用普通功能类
		Target concreteTarget = new ConcreteTarget();
		concreteTarget.request();
		
		// 使用特殊功能类，即适配类
		Target adapter = new Adapter();
		adapter.request();
	}
}
[/java]
二\象适配器 它不是使用多继承或继承再实现的方式，而是使用直接关联，或者称为委托的方式
[java]
// 适配器类，直接关联被适配类，同时实现标准接口
class Adapter implements Target{
	// 直接关联被适配类
	private Adaptee adaptee;
	
	// 可以通过构造函数传入具体需要适配的被适配类对象
	public Adapter (Adaptee adaptee) {
		this.adaptee = adaptee;
	}
	
	public void request() {
		// 这里是使用委托的方式完成特殊功能
		this.adaptee.specificRequest();
	}
}
// 测试类
public class Client {
	public static void main(String[] args) {
		// 使用普通功能类
		Target concreteTarget = new ConcreteTarget();
		concreteTarget.request();
		
		// 使用特殊功能类，即适配类，
		// 需要先创建一个被适配类的对象作为参数
		Target adapter = new Adapter(new Adaptee());
		adapter.request();
	}
}
[/java]
小结：
1、适配器模式也是一种包装模式，与之前的 Decorator 装饰模式同样具有包装的功能；此外，对象适配器模式还具有显式委托的意思在里面（其实类适配器也有这种意思，只不过比较隐含而已），那么我在认为它与 Proxy 代理模式也有点类似；
2、从上面一点对比来看， Decorator 、 Proxy、 Adapter 在实现了自身的最主要目的（这个得看各个模式的最初动机、描述）之外，都可以在包装的前后进行额外的、特殊的功能上的增减，因为我认为它们都有委托的实现意思在里面；
3、我所看的书中说适配器模式不适合在详细设计阶段使用它，它是一种补偿模式，专用来在系统后期扩展、修改时所用。
